# Based on an answer from https://stackoverflow.com/questions/37175898/how-do-i-send-a-hexadecimal-code

# Relay status command
[Byte[]] $status = 0x3A, 0x46, 0x45, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x46, 0x31, 0x0D, 0x0A

# Relay "Status return value"
[Byte[]] $retval = 0x3A, 0x46, 0x45, 0x30, 0x31, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x46, 0x46, 0x0D, 0x0A

# Relay serial commands (hex)
#                   -     -     -     -     -     -     -     -     incr  [on---off]  -     -     -     decr  -     -
[Byte[]] $ch1On   = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x30, 0x46, 0x46, 0x30, 0x30, 0x46, 0x45, 0x0D, 0x0A
[Byte[]] $ch1Off  = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x46, 0x44, 0x0D, 0x0A
[Byte[]] $ch2On   = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x31, 0x46, 0x46, 0x30, 0x30, 0x46, 0x44, 0x0D, 0x0A
[Byte[]] $ch2Off  = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x46, 0x43, 0x0D, 0x0A
[Byte[]] $ch3On   = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x32, 0x46, 0x46, 0x30, 0x30, 0x46, 0x43, 0x0D, 0x0A
[Byte[]] $ch3Off  = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x46, 0x42, 0x0D, 0x0A
[Byte[]] $ch4On   = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x33, 0x46, 0x46, 0x30, 0x30, 0x46, 0x42, 0x0D, 0x0A
[Byte[]] $ch4Off  = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x46, 0x41, 0x0D, 0x0A
[Byte[]] $ch5On   = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x34, 0x46, 0x46, 0x30, 0x30, 0x46, 0x41, 0x0D, 0x0A
[Byte[]] $ch5Off  = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x30, 0x46, 0x39, 0x0D, 0x0A
[Byte[]] $ch6On   = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x35, 0x46, 0x46, 0x30, 0x30, 0x46, 0x39, 0x0D, 0x0A
[Byte[]] $ch6Off  = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x35, 0x30, 0x30, 0x30, 0x30, 0x46, 0x38, 0x0D, 0x0A
[Byte[]] $ch7On   = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x36, 0x46, 0x46, 0x30, 0x30, 0x46, 0x38, 0x0D, 0x0A
[Byte[]] $ch7Off  = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x36, 0x30, 0x30, 0x30, 0x30, 0x46, 0x37, 0x0D, 0x0A
[Byte[]] $ch8On   = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x37, 0x46, 0x46, 0x30, 0x30, 0x46, 0x37, 0x0D, 0x0A
[Byte[]] $ch8Off  = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x37, 0x30, 0x30, 0x30, 0x30, 0x46, 0x36, 0x0D, 0x0A
[Byte[]] $ch9On   = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x38, 0x46, 0x46, 0x30, 0x30, 0x46, 0x36, 0x0D, 0x0A
[Byte[]] $ch9Off  = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x38, 0x30, 0x30, 0x30, 0x30, 0x46, 0x35, 0x0D, 0x0A
[Byte[]] $ch10On  = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x39, 0x46, 0x46, 0x30, 0x30, 0x46, 0x35, 0x0D, 0x0A
[Byte[]] $ch10Off = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x39, 0x30, 0x30, 0x30, 0x30, 0x46, 0x34, 0x0D, 0x0A
[Byte[]] $ch11On  = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x41, 0x46, 0x46, 0x30, 0x30, 0x46, 0x34, 0x0D, 0x0A
[Byte[]] $ch11Off = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x41, 0x30, 0x30, 0x30, 0x30, 0x46, 0x33, 0x0D, 0x0A
[Byte[]] $ch12On  = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x42, 0x46, 0x46, 0x30, 0x30, 0x46, 0x33, 0x0D, 0x0A
[Byte[]] $ch12Off = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x42, 0x30, 0x30, 0x30, 0x30, 0x46, 0x32, 0x0D, 0x0A
[Byte[]] $ch13On  = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x43, 0x46, 0x46, 0x30, 0x30, 0x46, 0x32, 0x0D, 0x0A
[Byte[]] $ch13Off = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x46, 0x31, 0x0D, 0x0A
[Byte[]] $ch14On  = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x44, 0x46, 0x46, 0x30, 0x30, 0x46, 0x31, 0x0D, 0x0A
[Byte[]] $ch14Off = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x44, 0x30, 0x30, 0x30, 0x30, 0x46, 0x30, 0x0D, 0x0A
[Byte[]] $ch15On  = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x45, 0x46, 0x46, 0x30, 0x30, 0x46, 0x30, 0x0D, 0x0A
[Byte[]] $ch15Off = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x45, 0x30, 0x30, 0x30, 0x30, 0x46, 0x46, 0x0D, 0x0A
[Byte[]] $ch16On  = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x46, 0x46, 0x46, 0x30, 0x30, 0x46, 0x46, 0x0D, 0x0A
[Byte[]] $ch16Off = 0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x46, 0x30, 0x30, 0x30, 0x30, 0x46, 0x45, 0x0D, 0x0A

# All relays commands
[Byte[]] $allOn  =  0x3A, 0x46, 0x45, 0x30, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x32, 0x46, 0x46, 0x46, 0x46, 0x45, 0x33, 0x0D, 0x0A
[Byte[]] $allOff = 0x3A, 0x46, 0x45, 0x30, 0x46, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x45, 0x31, 0x0D, 0x0A

# Group commands for easy use
$unlockCommands = $ch1On, $ch2On, $ch3On, $ch4On, $ch5On, $ch6On, $ch7On, $ch8On, $ch9On, $ch10On, $ch11On, $ch12On, $ch13On, $ch14On, $ch15On, $ch16On
$lockCommands = $ch1Off, $ch2Off, $ch3Off, $ch4Off, $ch5Off, $ch6Off, $ch7Off, $ch8Off, $ch9Off, $ch10Off, $ch11Off, $ch12Off, $ch13Off, $ch14Off, $ch15Off, $ch16Off

# Script execution
# {lock|unlock} {door-integer} {comName}
$command = $args[0]
$door = [int]$args[1]
$comName = $args[2]

Write-Host "Commands args:" $command $door

[Byte[]] $hexCommand

if ( $command -eq "lock" ) {
  Write-Host "Lock $door"
  $hexCommand = $lockCommands[$door - 1]
} elseif ($command -eq "unlock" ) {
  Write-Host "Unlock $door"
  $hexCommand = $unlockCommands[$door - 1]
} elseif ($command -eq "lock-all" ) {
  Write-Host "Lock All Doors"
  $hexCommand = $allOff
} elseif ($command -eq "unlock-all") {
  Write-Host "Unlock All Doors"
  $hexCommand = $allOn
}

Write-Host $hexCommand

# Use your COM port here
$port = new-Object System.IO.Ports.SerialPort $comName,9600,None,8,one
$port.Open()
$port.Write($hexCommand, 0, $hexCommand.Count)
$port.Close()
